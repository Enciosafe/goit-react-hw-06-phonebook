{"version":3,"sources":["components/ContactForm/InputForm/InputForm.module.css","components/ContactForm/InputForm/InputForm.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","InputForm","state","name","number","sex","handleChange","addContact","className","s","contactFormContainer","onSubmit","onChange","type","value","pattern","title","required","btn","checked","contactsActions","createAction","delContact","changeFilter","ContactForm","id","e","currentTarget","setState","uuidv4","preventDefault","props","contacts","some","elem","alert","reset","this","handleSexRadio","React","Component","connect","dispatch","data","contactActions","getVisibleContacts","allContacts","filter","lowerFilter","toLowerCase","contact","includes","handlerDel","map","onClick","handlerFilter","target","App","prevProps","prevState","JSON","stringify","window","localStorage","setItem","getItem","initialItems","parse","createReducer","actions","payload","_","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3b68a0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormContainer\":\"InputForm_contactFormContainer__3d_1e\",\"btn\":\"InputForm_btn__2MB_2\"};","import React from 'react';\nimport s from \"./InputForm.module.css\";\n\n\nconst InputForm = ({state: {name, number, sex}, handleChange, addContact}) => {\n\n    return <div className={s.contactFormContainer}>\n        <h3>Name</h3>\n        <form onSubmit={addContact}\n        >\n            <input onChange={handleChange}\n                   type=\"text\"\n                   name=\"name\"\n                   value={name}\n                   pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                   title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                   required\n            />\n            <h3>Number</h3>\n            <input onChange={handleChange}\n                   type=\"tel\"\n                   name=\"number\"\n                   value={number}\n                   pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                   title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                   required\n            />\n            <div>\n                <button type=\"submit\"\n                        className={s.btn}>Add contact</button>\n            </div>\n            <label>\n                <input type=\"radio\" name=\"sex\" value=\"male\" checked={sex === \"male\"} onChange={handleChange} /> 👨\n                <input type=\"radio\" name=\"sex\" value=\"female\" checked={sex === \"female\"} onChange={handleChange} /> 👩\n            </label>\n        </form>\n    </div>\n}\n\nexport default InputForm","\nimport { createAction } from '@reduxjs/toolkit'\n\nconst addContact = createAction('contacts/addContact')\nconst delContact = createAction('contacts/delContact')\nconst changeFilter = createAction('contacts/filteredContacts');\n\nconst contactsActions = {addContact, delContact, changeFilter}\n\nexport default contactsActions\n\n\n// const addContact = (data) => ({\n//     type: types.ADD,\n//     payload: ({\n//         name: data.name,\n//         number: data.number,\n//         id: data.id,\n//         sex: data.sex,\n//     })\n// })\n// const delContact = (id) => ({\n//     type: types.DEL,\n//     payload: id\n// })\n// const changeFilter = (value) => ({\n//     type: types.FILTER,\n//     payload: value,\n// })","import React from \"react\";\nimport InputForm from \"./InputForm/InputForm\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {connect} from \"react-redux\";\nimport contactActions from './../../redux/contacts/contacts-actions'\n\n\nclass ContactForm extends React.Component {\n\n\n    state = {\n        name: '',\n        number: '',\n        id:'',\n        sex: 'male'\n    }\n\n    handleChange = e => {\n        const { name, value} = e.currentTarget\n        this.setState({[name]: value})\n        this.setState({id: uuidv4()})\n    }\n\n    addContact = e => {\n        e.preventDefault();\n\n        this.props.contacts.some( elem => elem.name === this.state.name )\n            ? alert(`${this.state.name} is already exist in contacts`)\n            : this.props.onSubmit(this.state)\n\n        this.reset()\n    }\n\n\n\n    reset = () => {\n        this.setState({\n            name: '',\n            number: '',\n            id: ''\n        })\n    }\n\n\n    render() {\n        return (\n            <InputForm\n                state={this.state}\n                handleChange={this.handleChange}\n                addContact={this.addContact}\n                handleSexRadio={this.handleChange}\n            />\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: (data) => dispatch(contactActions.addContact(data))\n})\n\n\n\n\nexport default connect(null, mapDispatchToProps)(ContactForm)","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport contactsActions from './../../redux/contacts/contacts-actions'\n\n\nconst ContactList = ({contacts, handlerDel}) => {\n    return <div>\n        <ul>\n            {contacts.map(({ name, number, sex, id }) => (\n                <li key={id}>{name}: {number} ({sex})\n                    <button onClick={() => handlerDel(id)} type=\"submit\" id={id}>delete</button>\n                </li>\n            ))}\n        </ul>\n    </div>\n}\n\n\nconst getVisibleContacts = (allContacts, filter) => {\n    const lowerFilter = filter.toLowerCase()\n\n    return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(lowerFilter))\n}\n\n\nconst mapStateToProps = ({contacts: {contacts, filter}}) => ({\n contacts: getVisibleContacts(contacts, filter)\n})\n\nconst mapDispatchToProps = dispatch => ({\n    handlerDel: (id) => dispatch(contactsActions.delContact(id))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList)","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport contactsActions from './../../redux/contacts/contacts-actions'\n\n\nconst Filter = ({handlerFilter, filter}) => {\n    return <>\n        <p>Find contacts by name:</p>\n        <input onChange={handlerFilter}\n               type=\"text\"\n               value={filter}/></>\n}\n\nconst mapStateToProps = state => ({\n    filter: state.contacts.filter\n})\nconst mapDispatchToProps = dispatch => ({\n    handlerFilter: (e) => dispatch(contactsActions.changeFilter(e.target.value))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)","import React from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\n\n\n\n\n\nclass App extends React.Component {\n\n    componentDidUpdate(prevProps, prevState) {\n        const KEY = 'contacts'\n        if (this.props.contacts !== prevProps.contacts) {\n            const data = JSON.stringify(this.props.contacts)\n            window.localStorage.setItem(KEY, data)\n        }\n    }\n\n\n    render()\n    {\n        return <>\n        <h1>Phonebook</h1>\n            <ContactForm contacts={this.props.contacts}/>\n            <h2>Contacts</h2>\n            <Filter/>\n            <ContactList/>\n        </>\n  }\n}\n\nconst mapStateToProps = state => ({\n    contacts: state.contacts.contacts,\n    filter: state.contacts.filter,\n})\n\n\n\nexport default connect(mapStateToProps)(App);\n\n\nApp.propTypes = {\n    filter: PropTypes.string,\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string,\n            sex: PropTypes.string.isRequired\n        })\n    )\n};\n\n\n","import {combineReducers} from \"redux\";\nimport { createReducer } from '@reduxjs/toolkit'\nimport actions from './contacts-actions'\n\n\nconst KEY = 'contacts'\nconst data = window.localStorage.getItem(KEY) || '[]';\nconst initialItems = JSON.parse(data)\n\n\nconst contacts = createReducer(initialItems, {\n    [actions.addContact]: (state, {payload}) => [...state, payload],\n    [actions.delContact]: (state, {payload}) => state.filter(contact => contact.id !== payload),\n})\n\n\nconst filter = createReducer('', {\n    [actions.changeFilter]: (_, {payload}) => payload,\n})\n\nexport default combineReducers({\n    contacts,\n    filter,\n})\n\n\n// const contacts = (state = initialItems, {type, payload}) => {\n//     switch (type) {\n//         case types.ADD:\n//             return [...state, payload]\n//         case types.DEL:\n//             return state.filter(contact => contact.id !== payload)\n//         default:\n//             return state\n//\n//     }\n// }\n// const filter = (state = '', {type, payload}) => {\n//     switch (type) {\n//         case types.FILTER:\n//             return payload\n//         default:\n//             return state\n//\n//     }\n// }\n\n","import contactsReducer from './contacts/contacts-reducer'\nimport {configureStore} from \"@reduxjs/toolkit\";\n\n\nconst store = configureStore({\n    reducer: {\n        contacts: contactsReducer,\n    }\n})\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}